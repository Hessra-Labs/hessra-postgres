name: PostgreSQL Extension CI

on:
  push:
    branches: [main]
    tags:
      - "v*"
  pull_request:
    branches: [main]

jobs:
  build-and-test:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Install Docker and Docker Compose
        run: |
          # Install Docker (should already be available on GitHub runners)
          docker --version || { echo "Docker not available, installing..."; 
            sudo apt-get update
            sudo apt-get install -y docker.io
          }

          # Install Docker Compose standalone version (not the plugin)
          # This matches the 'docker-compose' command expected by the test script
          DOCKER_COMPOSE_VERSION=v2.24.5
          sudo curl -L "https://github.com/docker/compose/releases/download/${DOCKER_COMPOSE_VERSION}/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
          sudo chmod +x /usr/local/bin/docker-compose

          # Verify installations
          docker --version
          docker-compose --version || { echo "Docker Compose installation failed"; exit 1; }

      - name: Build PostgreSQL extension
        run: |
          # Build the extension using Docker
          docker build -t postgres-plugin-hessra:test .

      - name: Run tests
        run: |
          cd test

          # Verify docker-compose is available in this step
          docker-compose --version

          # Run the test script
          bash run_tests.sh

      - name: Static code analysis
        run: |
          # Add PostgreSQL apt repository
          sudo sh -c 'echo "deb http://apt.postgresql.org/pub/repos/apt $(lsb_release -cs)-pgdg main" > /etc/apt/sources.list.d/pgdg.list'
          wget --quiet -O - https://www.postgresql.org/media/keys/ACCC4CF8.asc | sudo apt-key add -

          # Update and install PostgreSQL development packages
          sudo apt-get update
          sudo apt-get install -y postgresql-server-dev-15

          # Check for C compiler warnings
          gcc -Wall -Werror -I$(pg_config --includedir-server) -c hessra_authz.c -o /tmp/hessra_authz.o || true

      - name: SQL Validation
        run: |
          # Validate SQL file syntax
          for sql_file in $(find . -name "*.sql"); do
            echo "Validating SQL syntax in $sql_file"
            cat $sql_file | docker run --rm postgres:15 postgres -f - >/dev/null || echo "Warning: SQL validation failed for $sql_file"
          done

      - name: Documentation check
        run: |
          # Ensure README.md exists and has content
          if [ ! -s "README.md" ]; then
            echo "Warning: README.md is missing or empty"
          else
            echo "README.md exists and has content"
          fi

          # Check for SQL comments coverage
          sql_files=$(find . -name "*.sql" | wc -l)
          sql_files_with_comments=$(grep -l "^--" $(find . -name "*.sql") | wc -l)
          echo "SQL files with comments: $sql_files_with_comments out of $sql_files"

  compatibility-test:
    runs-on: ubuntu-latest
    needs: build-and-test
    strategy:
      matrix:
        postgres-version: ["14", "15", "16"]

    steps:
      - uses: actions/checkout@v3

      - name: Install Docker and Docker Compose
        run: |
          # Install Docker (should already be available on GitHub runners)
          docker --version || { echo "Docker not available, installing..."; 
            sudo apt-get update
            sudo apt-get install -y docker.io
          }

          # Install Docker Compose standalone version (not the plugin)
          DOCKER_COMPOSE_VERSION=v2.24.5
          sudo curl -L "https://github.com/docker/compose/releases/download/${DOCKER_COMPOSE_VERSION}/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
          sudo chmod +x /usr/local/bin/docker-compose

          # Verify installations
          docker --version
          docker-compose --version || { echo "Docker Compose installation failed"; exit 1; }

      - name: Test with PostgreSQL ${{ matrix.postgres-version }}
        run: |
          # Modify Dockerfile to use the specific PostgreSQL version
          sed -i "s/ARG PG_MAJOR=.*/ARG PG_MAJOR=${{ matrix.postgres-version }}/" Dockerfile

          # Build with the specific PostgreSQL version
          docker build -t postgres-plugin-hessra:pg${{ matrix.postgres-version }} .

          # Basic test to see if the extension loads
          docker run --rm postgres-plugin-hessra:pg${{ matrix.postgres-version }} psql -U postgres -c "CREATE EXTENSION hessra_authz;" || echo "Warning: Extension failed to load in PostgreSQL ${{ matrix.postgres-version }}"

  publish:
    name: Build and publish extension package
    runs-on: ubuntu-latest
    needs: [build-and-test, compatibility-test]
    if: startsWith(github.ref, 'refs/tags/v')

    steps:
      - uses: actions/checkout@v3

      - name: Set up PostgreSQL development packages
        run: |
          sudo apt-get update
          sudo apt-get install -y postgresql-server-dev-all

      - name: Extract version from tag
        id: get_version
        run: echo "VERSION=${GITHUB_REF#refs/tags/v}" >> $GITHUB_ENV

      - name: Build package
        run: |
          # Create a temporary build directory
          mkdir -p build/hessra_authz

          # Copy necessary files to the build directory
          cp hessra_authz.c build/hessra_authz/
          cp hessra_authz--0.1.0.sql build/hessra_authz/
          cp hessra_authz.control build/hessra_authz/
          cp Makefile build/hessra_authz/
          cp -r sql build/hessra_authz/
          cp README.md build/hessra_authz/

          # Update version in control file to match tag (if needed)
          sed -i "s/default_version = '.*'/default_version = '$VERSION'/" build/hessra_authz/hessra_authz.control

          # Create the package
          cd build
          tar -czf hessra_authz-$VERSION.tar.gz hessra_authz/

      - name: Create Release
        id: create_release
        uses: softprops/action-gh-release@v1
        with:
          files: build/hessra_authz-${{ env.VERSION }}.tar.gz
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
